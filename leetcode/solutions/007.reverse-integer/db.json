{"java":"/*\r\n * @lc app=leetcode id=7 lang=java\r\n *\r\n * [7] Reverse Integer\r\n *\r\n * https://leetcode.com/problems/reverse-integer/description/\r\n *\r\n * algorithms\r\n * Easy (25.09%)\r\n * Total Accepted:    603.6K\r\n * Total Submissions: 2.4M\r\n * Testcase Example:  '123'\r\n *\r\n * Given a 32-bit signed integer, reverse digits of an integer.\r\n * \r\n * Example 1:\r\n * \r\n * \r\n * Input: 123\r\n * Output: 321\r\n * \r\n * \r\n * Example 2:\r\n * \r\n * \r\n * Input: -123\r\n * Output: -321\r\n * \r\n * \r\n * Example 3:\r\n * \r\n * \r\n * Input: 120\r\n * Output: 21\r\n * \r\n * \r\n * Note:\r\n * Assume we are dealing with an environment which could only store integers\r\n * within the 32-bit signed integer range: [−231,  231 − 1]. For the purpose of\r\n * this problem, assume that your function returns 0 when the reversed integer\r\n * overflows.\r\n * \r\n */\r\nclass Solution {\r\n    public int reverse(int x) {\r\n        int result = 0;\r\n        while (x != 0) {\r\n            int tail = x % 10;\r\n            int newResult = result * 10 + tail;\r\n            if ((newResult - tail) / 10 != result) {\r\n                // prevent the reversed integer overflows\r\n                return 0;\r\n            }\r\n            result = newResult;\r\n            x = x / 10;\r\n        }\r\n        return result;\r\n    }\r\n}\r\n"}