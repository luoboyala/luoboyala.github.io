{"java":"/*\r\n * @lc app=leetcode id=27 lang=java\r\n *\r\n * [27] Remove Element\r\n *\r\n * https://leetcode.com/problems/remove-element/description/\r\n *\r\n * algorithms\r\n * Easy (43.42%)\r\n * Total Accepted:    367.9K\r\n * Total Submissions: 847.1K\r\n * Testcase Example:  '[3,2,2,3]\\n3'\r\n *\r\n * Given an array nums and a value val, remove all instances of that value\r\n * in-place and return the new length.\r\n * \r\n * Do not allocate extra space for another array, you must do this by modifying\r\n * the input array in-place with O(1) extra memory.\r\n * \r\n * The order of elements can be changed. It doesn't matter what you leave\r\n * beyond the new length.\r\n * \r\n * Example 1:\r\n * \r\n * \r\n * Given nums = [3,2,2,3], val = 3,\r\n * \r\n * Your function should return length = 2, with the first two elements of nums\r\n * being 2.\r\n * \r\n * It doesn't matter what you leave beyond the returned length.\r\n * \r\n * \r\n * Example 2:\r\n * \r\n * \r\n * Given nums = [0,1,2,2,3,0,4,2], val = 2,\r\n * \r\n * Your function should return length = 5, with the first five elements of nums\r\n * containing 0, 1, 3, 0, and 4.\r\n * \r\n * Note that the order of those five elements can be arbitrary.\r\n * \r\n * It doesn't matter what values are set beyond the returned length.\r\n * \r\n * Clarification:\r\n * \r\n * Confused why the returned value is an integer but your answer is an array?\r\n * \r\n * Note that the input array is passed in by reference, which means\r\n * modification to the input array will be known to the caller as well.\r\n * \r\n * Internally you can think of this:\r\n * \r\n * \r\n * // nums is passed in by reference. (i.e., without making a copy)\r\n * int len = removeElement(nums, val);\r\n * \r\n * // any modification to nums in your function would be known by the caller.\r\n * // using the length returned by your function, it prints the first len\r\n * elements.\r\n * for (int i = 0; i < len; i++) {\r\n * print(nums[i]);\r\n * }\r\n * \r\n */\r\nclass Solution {\r\n    public int removeElement(int[] nums, int val) {\r\n        /**\r\n         * 单指针：碰到nums[i]==value的情况，用尾端替换这个值 然后再进行这个值的核验，如果不相等，则i++\r\n         */\r\n        int len = nums.length;\r\n        int i = 0;\r\n        while (i < len) {\r\n            if (nums[i] == val) {\r\n                nums[i] = nums[len - 1];\r\n                len--;\r\n            } else {\r\n                i++;\r\n            }\r\n        }\r\n        return len;\r\n\r\n        // 双指针：用i遍历，碰到不是value的值，\r\n        // 让len++，并且覆盖nums[len]的值，顺序也没有变化\r\n        // int len = 0;\r\n        // for (int i = 0; i < nums.length; i++) {\r\n        // if (nums[i] != val) {\r\n        // nums[len] = nums[i];\r\n        // len++;\r\n        // }\r\n        // }\r\n        // return len;\r\n    }\r\n}\r\n"}