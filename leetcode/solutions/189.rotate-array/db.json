{"java":"/*\r\n * @lc app=leetcode id=189 lang=java\r\n *\r\n * [189] Rotate Array\r\n *\r\n * https://leetcode.com/problems/rotate-array/description/\r\n *\r\n * algorithms\r\n * Easy (28.77%)\r\n * Total Accepted:    263K\r\n * Total Submissions: 914.2K\r\n * Testcase Example:  '[1,2,3,4,5,6,7]\\n3'\r\n *\r\n * Given an array, rotate the array to the right by k steps, where k is\r\n * non-negative.\r\n * \r\n * Example 1:\r\n * \r\n * \r\n * Input: [1,2,3,4,5,6,7] and k = 3\r\n * Output: [5,6,7,1,2,3,4]\r\n * Explanation:\r\n * rotate 1 steps to the right: [7,1,2,3,4,5,6]\r\n * rotate 2 steps to the right: [6,7,1,2,3,4,5]\r\n * rotate 3 steps to the right: [5,6,7,1,2,3,4]\r\n * \r\n * \r\n * Example 2:\r\n * \r\n * \r\n * Input: [-1,-100,3,99] and k = 2\r\n * Output: [3,99,-1,-100]\r\n * Explanation: \r\n * rotate 1 steps to the right: [99,-1,-100,3]\r\n * rotate 2 steps to the right: [3,99,-1,-100]\r\n * \r\n * \r\n * Note:\r\n * \r\n * \r\n * Try to come up as many solutions as you can, there are at least 3 different\r\n * ways to solve this problem.\r\n * Could you do it in-place with O(1) extra space?\r\n * \r\n */\r\nclass Solution {\r\n    public void rotate(int[] nums, int k) {\r\n        // brute force\r\n        for (int i = 0; i < k; i++) {\r\n            int last = nums[nums.length - 1];\r\n            int temp;\r\n            for (int j = 0; j < nums.length; j++) {\r\n                temp = nums[j];\r\n                nums[j] = last;\r\n                last = temp;\r\n\r\n            }\r\n        }\r\n    }\r\n}\r\n"}