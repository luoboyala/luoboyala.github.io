{"java":"import java.util.HashMap;\r\nimport java.util.Map;\r\n\r\n/*\r\n * @lc app=leetcode id=1 lang=java\r\n *\r\n * [1] Two Sum\r\n *\r\n * https://leetcode.com/problems/two-sum/description/\r\n *\r\n * algorithms\r\n * Easy (40.69%)\r\n * Total Accepted:    1.4M\r\n * Total Submissions: 3.5M\r\n * Testcase Example:  '[2,7,11,15]\\n9'\r\n *\r\n * Given an array of integers, return indices of the two numbers such that they\r\n * add up to a specific target.\r\n * \r\n * You may assume that each input would have exactly one solution, and you may\r\n * not use the same element twice.\r\n * \r\n * Example:\r\n * \r\n * \r\n * Given nums = [2, 7, 11, 15], target = 9,\r\n * \r\n * Because nums[0] + nums[1] = 2 + 7 = 9,\r\n * return [0, 1].\r\n * \r\n * \r\n * \r\n * \r\n */\r\nclass Solution {\r\n    public int[] twoSum(int[] nums, int target) {\r\n        // // brute force\r\n        // for (int i = 0; i < nums.length; i++) {\r\n        // int start = nums[i];\r\n        // for (int j = i + 1; j < nums.length; j++) {\r\n        // if (nums[j] == target - start) {\r\n        // return new int[] { i, j };\r\n        // }\r\n        // }\r\n\r\n        // }\r\n\r\n        // // hash map two-pass\r\n        // Map<Integer, Integer> map = new HashMap<>();\r\n        // for (int i = 0; i < nums.length; i++) {\r\n        // map.put(nums[i], i);\r\n        // }\r\n        // for (int i = 0; i < nums.length; i++) {\r\n        // int last = target - nums[i];\r\n        // if (map.containsKey(last) && map.get(last) != i) {\r\n        // return new int[] { i, map.get(last) };\r\n        // }\r\n        // }\r\n        // hash map one-pass\r\n        Map<Integer, Integer> map = new HashMap<>();\r\n        for (int i = 0; i < nums.length; i++) {\r\n            // at the first, the hashmap is empty and do the false if condition\r\n            // then put key and value into hashmap\r\n            // the next circle is the same and if there comes a match answer\r\n            // this answer must be putted into map before.\r\n            int last = target - nums[i];\r\n            if (map.containsKey(last) && map.get(last) != i) {\r\n                return new int[] { i, map.get(last) };\r\n            }\r\n            map.put(nums[i], i);\r\n        }\r\n        throw new IllegalArgumentException(\"No two sum solution\");\r\n    }\r\n}\r\n"}