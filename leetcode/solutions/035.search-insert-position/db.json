{"java":"/*\r\n * @lc app=leetcode id=35 lang=java\r\n *\r\n * [35] Search Insert Position\r\n *\r\n * https://leetcode.com/problems/search-insert-position/description/\r\n *\r\n * algorithms\r\n * Easy (40.40%)\r\n * Total Accepted:    357.9K\r\n * Total Submissions: 885.9K\r\n * Testcase Example:  '[1,3,5,6]\\n5'\r\n *\r\n * Given a sorted array and a target value, return the index if the target is\r\n * found. If not, return the index where it would be if it were inserted in\r\n * order.\r\n * \r\n * You may assume no duplicates in the array.\r\n * \r\n * Example 1:\r\n * \r\n * \r\n * Input: [1,3,5,6], 5\r\n * Output: 2\r\n * \r\n * \r\n * Example 2:\r\n * \r\n * \r\n * Input: [1,3,5,6], 2\r\n * Output: 1\r\n * \r\n * \r\n * Example 3:\r\n * \r\n * \r\n * Input: [1,3,5,6], 7\r\n * Output: 4\r\n * \r\n * \r\n * Example 4:\r\n * \r\n * \r\n * Input: [1,3,5,6], 0\r\n * Output: 0\r\n * \r\n * \r\n */\r\nclass Solution {\r\n    public int searchInsert(int[] nums, int target) {\r\n        int start = 0;\r\n        int end = nums.length - 1;\r\n        if (nums.length == 0) {\r\n            return 0;\r\n        }\r\n        while (start <= end) {\r\n            int mid = (start + end) / 2;\r\n            if (target == nums[mid]) {\r\n                return mid;\r\n            } else if (target < nums[mid]) {\r\n                end = mid - 1;\r\n            } else {\r\n                start = mid + 1;\r\n            }\r\n        }\r\n\r\n        return start;\r\n\r\n        // int i = 0;\r\n        // for (i = 0; i < nums.length; i++) {\r\n        // if (target <= nums[i]) {\r\n        // return i;\r\n        // }\r\n        // }\r\n        // return i;\r\n    }\r\n\r\n}\r\n"}